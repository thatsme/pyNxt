# -*- coding: utf-8 -*-
from base.BasePost import BasePost as Parent

class DecodeFileToken(Parent):
    def __init__(self, file=None, token=None):
        """
            Validate a file token without requiring the transmission of a secret passphrase. POST only.

            DecodeFileToken take a default 1 parameter as explained in NXT API Documentation

            https://nxtwiki.org/wiki/The_Nxt_API#Decode_File_Token

            REQUEST
            :param file is the path to the file that was signed
            :param token is the token of the file, as generated by Generate File Token

            RESPONSE
            :return account : (S) is the account number that generated the token
            :return accountRS : (S) is the Reed-Solomon address of the account
            :return timestamp : (N) is the time (in seconds since the genesis block) that the token was generated
            :return valid : (B) is true if token is valid, false otherwise
            :return requestProcessingTime : (N) is the API request processing time (in millisec)

            Note: Since token contains the token generator's public key and digital signature, file can be
            validated as signed by the owner of the public key, and the public key determines the account ID.

            Legenda
                Â° the parameter are interchangeable on
                * if you use the secretPhrase , the transaction is immediately broadcasted to network
                ** if you use the publicKey, you create an unsigned Transaction, and you need to sign and broardcast
                *** for buying
                (R) Required
                (O) Optional
                (N) Number
                (S) String
                (B) Boolean
                (A) Array
                (OB) Object
                >   Array Element
                (WP) Wrapper Meta-parameter

        """

        # Required parameters
        self.token = token
        self.file = file

        # Initialize dictionary
        self.data = {}

        ## Create data dictionary
        self.data["file"] = self.file
        self.data["token"] = self.token

        super(DecodeFileToken, self).__init__(rt="decodeFileToken", data=self.data)

    def run(self):
        super(DecodeFileToken, self).run()                # calls 'BasePost.run()'

    def getData(self, key=None):
        """
        :param key: dictionary key, if None return the whole dictionary
        :return: dictionary of data
        """
        return super(DecodeFileToken, self).getData(key)  # calls 'BasePost.getData()'

