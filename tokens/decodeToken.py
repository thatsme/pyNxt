# -*- coding: utf-8 -*-
from base.BaseGet import BaseGet as Parent

class DecodeToken(Parent):

    def __init__(self, website=None, token=None):
        """
            Decode a node hallmark.

            DecodeToken take a default 1 parameter as explained in NXT API Documentation
            Class is working with GET method

            https://nxtwiki.org/wiki/The_Nxt_API#Decode_Token

            REQUEST
            :param website is the signed text, typically an authorized URL
            :param token is the token generated by Generate Token

            RESPONSE
            :return account (S) is the account number that generated the token
            :return accountRS (S) is the Reed-Solomon address of the account
            :return timestamp (N) is the time (in seconds since the genesis block) that the token was created
            :return valid (B) is true if token is valid, false otherwise
            :return requestProcessingTime (N) is the API request processing time (in millisec)

            Legenda :
                Â° the parameter are interchangeable on
                * if you use the secretPhrase , the transaction is immediately broadcasted to network
                ** if you use the publicKey, you create an unsigned Transaction, and you need to sign and broardcast
                *** for buying
                (R) Required
                (O) Optional
                (N) Number
                (S) String
                (B) Boolean
                (A) Array
                (OB) Object
                >   Array Element
                (WP) Wrapper Meta-parameter

        """

        self.website = website
        self.token = token

        # Initialize dictionary
        self.data = {}

        ## Create data dictionary
        self.data["website"] = self.website
        self.data["token"] = self.token

        super(DecodeToken, self).__init__(rt = "decodeToken", data=self.data)

    def run(self):
        super(DecodeToken, self).run()                             # calls 'BaseGet.run()'

    def getData(self, key=None):
        """
        :param key: dictionary key, if None return the whole dictionary
        :return: dictionary of data
        """
        return super(DecodeToken, self).getData(key)               # calls 'BaseGet.getData()'